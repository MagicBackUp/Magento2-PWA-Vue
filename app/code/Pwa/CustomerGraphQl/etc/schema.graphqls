type Mutation {
    confirmCustomerEmail(key: String!, email: String!, password: String!): CreateCustomerType @resolver(class: "\\Pwa\\CustomerGraphQl\\Model\\Resolver\\ConfirmEmail") @doc(description:"Confirm customer account")
    generateCustomerToken(email: String!, password: String!, guest_quote_id: String): CustomerToken @resolver(class: "\\Pwa\\CustomerGraphQl\\Model\\Resolver\\GenerateCustomerToken") @doc(description:"Retrieve the customer token")
    resendConfirmationEmail(email: String!): CustomerActionConfirmationType @resolver(class: "\\Pwa\\CustomerGraphQl\\Model\\Resolver\\ResendConfirmationEmail") @doc(description:"Resend customer confirmation")
    forgotPassword(email: String!): CustomerActionConfirmationType @resolver(class: "\\Pwa\\CustomerGraphQl\\Model\\Resolver\\ForgotPassword") @doc(description:"Resend customer confirmation")
    resetPassword(password: String!, token: String!, password_confirmation: String!): ResetPasswordType @resolver(class: "\\Pwa\\CustomerGraphQl\\Model\\Resolver\\ResetPassword") @doc(description:"Resend customer confirmation")
}

type CustomerActionConfirmationType {
    status: String @doc(description: "Customer email verification status")
}

type ResetPasswordType {
    status: String @doc(description: "Customer reset status")
    token: String @doc(description: "The customer token")
}

type CreateCustomerType {
    status: String @doc(description: "Customer creation status")
    token: String @doc(description: "The customer token")
    customer: Customer
}

type AvailabilityResponseType {
    isAvailable: Boolean
}

type Customer @doc(description: "Customer defines the customer name and address and other details") {
    confirmation_required: Boolean @doc(description: "Email confirmation is required")
}